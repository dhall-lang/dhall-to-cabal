name: lens
version: 4.16
cabal-version: 2.0
build-type: Custom
license: BSD2
license-file: LICENSE
copyright: Copyright C 2012 -2016 Edward A.Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
bug-reports: http://github.com/ekmett/lens/issues
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
    .
category: Data, Lenses, Generics
author: Edward A. Kmett
tested-with: GHC ==7.4.2 GHC ==7.6.3 GHC ==7.8.4 GHC ==7.10.3
             GHC ==8.0.2 GHC ==8.2.2 GHC ==8.4.1
extra-source-files:
    .travis.yml
    .gitignore
    .vim.custom
    cabal.project
    examples/LICENSE
    examples/lens-examples.cabal
    examples/*.hs
    examples/*.lhs
    images/*.png
    lens-properties/CHANGELOG.markdown
    lens-properties/LICENSE
    lens-properties/Setup.hs
    travis/cabal-apt-install
    travis/config
    HLint.hs
    Warning.hs
    AUTHORS.markdown
    CHANGELOG.markdown
    README.markdown
    SUPPORT.markdown

source-repository head
    type: git
    location: https://github.com/ekmett/lens.git

flag benchmark-uniplate
    description:
        Enable benchmarking against Neil Mitchell's uniplate library for comparative performance analysis. Defaults to being turned off to avoid
        the extra dependency.
        .
        > cabal configure --enable-benchmarks -fbenchmark-uniplate && cabal build && cabal bench
    default: False
    manual: True

flag safe
    description:
        Disallow unsafeCoerce
    default: False
    manual: True

library
    
    if impl(ghc <8)
        build-depends:
            generic-deriving >=1.10
    
    if impl(ghc <7.9)
        build-depends:
            nats >=0.1
    
    if flag(safe)
        cpp-options: -DSAFE=1
    exposed-modules:
        Control.Exception.Lens
        Control.Lens
        Control.Lens.At
        Control.Lens.Combinators
        Control.Lens.Cons
        Control.Lens.Each
        Control.Lens.Empty
        Control.Lens.Equality
        Control.Lens.Extras
        Control.Lens.Fold
        Control.Lens.Getter
        Control.Lens.Indexed
        Control.Lens.Internal
        Control.Lens.Internal.Bazaar
        Control.Lens.Internal.ByteString
        Control.Lens.Internal.Coerce
        Control.Lens.Internal.Context
        Control.Lens.Internal.CTypes
        Control.Lens.Internal.Deque
        Control.Lens.Internal.Exception
        Control.Lens.Internal.FieldTH
        Control.Lens.Internal.PrismTH
        Control.Lens.Internal.Fold
        Control.Lens.Internal.Getter
        Control.Lens.Internal.Indexed
        Control.Lens.Internal.Instances
        Control.Lens.Internal.Iso
        Control.Lens.Internal.Level
        Control.Lens.Internal.List
        Control.Lens.Internal.Magma
        Control.Lens.Internal.Prism
        Control.Lens.Internal.Review
        Control.Lens.Internal.Setter
        Control.Lens.Internal.TH
        Control.Lens.Internal.Zoom
        Control.Lens.Iso
        Control.Lens.Lens
        Control.Lens.Level
        Control.Lens.Operators
        Control.Lens.Plated
        Control.Lens.Prism
        Control.Lens.Reified
        Control.Lens.Review
        Control.Lens.Setter
        Control.Lens.TH
        Control.Lens.Traversal
        Control.Lens.Tuple
        Control.Lens.Type
        Control.Lens.Unsound
        Control.Lens.Wrapped
        Control.Lens.Zoom
        Control.Monad.Error.Lens
        Control.Parallel.Strategies.Lens
        Control.Seq.Lens
        Data.Array.Lens
        Data.Bits.Lens
        Data.ByteString.Lens
        Data.ByteString.Strict.Lens
        Data.ByteString.Lazy.Lens
        Data.Complex.Lens
        Data.Data.Lens
        Data.Dynamic.Lens
        Data.HashSet.Lens
        Data.IntSet.Lens
        Data.List.Lens
        Data.Map.Lens
        Data.Sequence.Lens
        Data.Set.Lens
        Data.Text.Lens
        Data.Text.Strict.Lens
        Data.Text.Lazy.Lens
        Data.Tree.Lens
        Data.Typeable.Lens
        Data.Vector.Lens
        Data.Vector.Generic.Lens
        GHC.Generics.Lens
        System.Exit.Lens
        System.FilePath.Lens
        System.IO.Error.Lens
        Language.Haskell.TH.Lens
        Numeric.Lens
        Numeric.Natural.Lens
    build-depends:
        ghc-prim -any
    cpp-options: -traditional
    hs-source-dirs: src
    other-modules:
        Paths_lens
    ghc-options: -Wall


